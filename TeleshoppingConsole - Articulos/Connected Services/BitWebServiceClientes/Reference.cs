//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.ServiceModel;

namespace BitWebServiceClientes
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://WsGenDocsFacade/", ConfigurationName="BitWebServiceClientes.WsGenDocsSoap")]
    public interface WsGenDocsSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WsGenDocsFacade/HelloWorld", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> HelloWorldAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WsGenDocsFacade/Generate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GenerateAsync(string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WsGenDocsFacade/GetErrors", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetErrorsAsync();
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://WsGenDocsFacade/CheckDoc", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<BitWebServiceClientes.CheckDocResponse> CheckDocAsync(BitWebServiceClientes.CheckDocRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckDoc", WrapperNamespace="http://WsGenDocsFacade/", IsWrapped=true)]
    public partial class CheckDocRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://WsGenDocsFacade/", Order=0)]
        public int orderNumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://WsGenDocsFacade/", Order=1)]
        public int docStatus;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://WsGenDocsFacade/", Order=2)]
        public long docID;
        
        public CheckDocRequest()
        {
        }
        
        public CheckDocRequest(int orderNumber, int docStatus, long docID)
        {
            this.orderNumber = orderNumber;
            this.docStatus = docStatus;
            this.docID = docID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckDocResponse", WrapperNamespace="http://WsGenDocsFacade/", IsWrapped=true)]
    public partial class CheckDocResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://WsGenDocsFacade/", Order=0)]
        public int docStatus;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://WsGenDocsFacade/", Order=1)]
        public long docID;
        
        public CheckDocResponse()
        {
        }
        
        public CheckDocResponse(int docStatus, long docID)
        {
            this.docStatus = docStatus;
            this.docID = docID;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface WsGenDocsSoapChannel : BitWebServiceClientes.WsGenDocsSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class WsGenDocsSoapClient : System.ServiceModel.ClientBase<BitWebServiceClientes.WsGenDocsSoap>, BitWebServiceClientes.WsGenDocsSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public WsGenDocsSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(WsGenDocsSoapClient.GetBindingForEndpoint(endpointConfiguration), WsGenDocsSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WsGenDocsSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(WsGenDocsSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WsGenDocsSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(WsGenDocsSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WsGenDocsSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> HelloWorldAsync()
        {
            return base.Channel.HelloWorldAsync();
        }
        
        public System.Threading.Tasks.Task<string> GenerateAsync(string parameters)
        {
            return base.Channel.GenerateAsync(parameters);
        }
        
        public System.Threading.Tasks.Task<string> GetErrorsAsync()
        {
            return base.Channel.GetErrorsAsync();
        }
        
        public System.Threading.Tasks.Task<BitWebServiceClientes.CheckDocResponse> CheckDocAsync(BitWebServiceClientes.CheckDocRequest request)
        {
            return base.Channel.CheckDocAsync(request);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WsGenDocsSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                result.Security.Transport.ClientCredentialType = HttpClientCredentialType.Basic;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.WsGenDocsSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WsGenDocsSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://biterpsuitetsg1.biterpsuite.com:4431/WsGenDocsFacade/wsGenDocs.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.WsGenDocsSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://biterpsuitetsg1.biterpsuite.com:4431/WsGenDocsFacade/wsGenDocs.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            WsGenDocsSoap,
            
            WsGenDocsSoap12,
        }
    }
}
